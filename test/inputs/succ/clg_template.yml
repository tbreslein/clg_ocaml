# relative to this file, or absolute
changelog_path: string

# file name format for the change log files
#
# example: "^PR_*\.log\.yml$"
#
# supports capture groups, which you can use in the message formatting
#
# example: "^PR_(\d+)\.log\.yml$"
# this would capture digits between "PR_" and ".log.yml" as the first capture
# group
file_regex: string

# each changelog message has to fulfill the following regex, otherwise a
# parse error is thrown
#
# example: "^(feat|fix|chore): \+"
# this would throw whenever a message does not start with feat, fix, or chore,
# followed by a ": " and then at least one more character
msg_regex: string

# string to prefix each change log message.
# can include a capture group captured by file_regex with regular regex
# references \1, \2, etc.
#
# example: "\[PR \1\] "
# taking the second example from the file_regex field to capture the PR
# number, if you parsed a file like "PR_1234.log.yml", this would prefix each
# change message in the log file with the string "[PR 1234] ", where "1234"
# is captured from the file name.
msg_prefix: string

# string to append to each change log message.
# can include a capture group captured by file_regex with regular regex
# references \1, \2, etc.
#
# example: " \(PR \1\)"
# similar to the example for msg_prefix, for a file like "PR_420.log.yml"
# this would suffix each log message in that file with the string " (PR 420)"
msg_suffix: string

# Define the template tree for your change log files.
# The full tree underneath the "template" node is taken as is, and each
# parsed change log message must be a subtree of this template tree.
# Each leaf of this tree must be a string saying either "list" or "string"
template:
  some_note: string
  release_version: string
  topic1:
    subtopic1:
      - list
    subtopic2:
      - list
  topic2:
    - list
  topic3:
    subtopic1:
      subsubtopic1:
        - list
    subtopic2:
      - list
